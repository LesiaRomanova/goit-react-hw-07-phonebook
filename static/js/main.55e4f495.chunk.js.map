{"version":3,"sources":["component/ContactList/ContactList.module.css","redux/contacts/contacts-action.js","redux/contacts/contacts-reducer.js","redux/store.js","redux/contacts/contacts-selectors.js","redux/contacts/contacts-operations.js","component/ContactList/ContactList.js","component/Filter/Filter.js","component/ContactForm/ContactForm.js","App.js","index.js","component/ContactForm/ContactForm.module.css"],"names":["module","exports","fetchContactRequest","createAction","fetchContactError","fetchContactSuccess","addContactRequest","addContactError","addContactSuccess","removeContactRequest","removeContactError","removeContactSuccess","changeFilter","items","createReducer","_","payload","state","filter","id","loading","combineReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","logger","store","configureStore","reducer","contacts","contactsReducer","devTools","process","getFilter","getLoading","getVisibleContacts","createSelector","name","toLowerCase","includes","axios","defaults","baseURL","dispatch","get","then","data","catch","error","addContact","text","console","log","contact","number","post","contactId","delete","connect","contactsSelectors","onRemoveContact","contactsOperations","className","styles","TaskList","map","TaskList_item","TaskList_button","type","onClick","Filter","value","onChangeFilter","onChange","defaultProps","onchangeFilter","e","contactsActions","target","ContactForm","handleChange","setState","handleSubmit","preventDefault","searchSameName","props","find","alert","length","onAddContact","TaskEditor","onSubmit","this","TaskEditor_label","TaskEditor_input","TaskEditor_button","Component","App","fetchContacts","isLoadingContacts","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.55e4f495.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskList\":\"ContactList_TaskList__1MHUn\",\"TaskList_item\":\"ContactList_TaskList_item__hrhx0\",\"completed\":\"ContactList_completed__3DVmP\",\"TaskList_text\":\"ContactList_TaskList_text__2QFBa\",\"TaskList_actions\":\"ContactList_TaskList_actions__2HYho\",\"TaskList_button\":\"ContactList_TaskList_button__1ptnM\"};","import { createAction } from '@reduxjs/toolkit';\r\n\r\nexport const fetchContactRequest = createAction('contacts/fetchContactRequest');\r\nexport const fetchContactError = createAction('contacts/fetchContactError');\r\nexport const fetchContactSuccess = createAction('contacts/fetchContactSuccess');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactError = createAction('contacts/addContactError');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\n\r\nexport const removeContactRequest = createAction(\r\n  'contacts/removeContactRequest',\r\n);\r\nexport const removeContactError = createAction('contacts/removeContactError');\r\nexport const removeContactSuccess = createAction(\r\n  'contacts/removeContactSuccess',\r\n);\r\n\r\nexport const changeFilter = createAction('contacts / changeFilter');\r\n","import { combineReducers, createStore } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\nimport {\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  removeContactRequest,\r\n  removeContactError,\r\n  removeContactSuccess,\r\n  changeFilter,\r\n  fetchContactRequest,\r\n  fetchContactError,\r\n  fetchContactSuccess,\r\n} from './contacts-action';\r\n\r\nconst items = createReducer([], {\r\n  [fetchContactSuccess]: (_, { payload }) => payload,\r\n  [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n  [removeContactSuccess]: (state, { payload }) =>\r\n    state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n  [fetchContactRequest]: () => true,\r\n  [fetchContactSuccess]: () => false,\r\n  [fetchContactError]: () => false,\r\n  [addContactRequest]: () => true,\r\n  [addContactSuccess]: () => false,\r\n  [addContactError]: () => false,\r\n  [removeContactRequest]: () => true,\r\n  [removeContactSuccess]: () => false,\r\n  [removeContactError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n  [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\nexport default combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n});\r\n","import contactsReducer from './contacts/contacts-reducer';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n\r\nimport { configureStore, getDefaultMiddleware } from '@reduxjs/toolkit';\r\n\r\nconst middleware = [\r\n  ...getDefaultMiddleware({\r\n    serializableCheck: {\r\n      ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n    },\r\n  }),\r\n\r\n  logger,\r\n];\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n  middleware: middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\nexport default store;\r\n","import { createSelector } from 'reselect';\r\n\r\nconst getLoading = state => state.contacts.loading;\r\n\r\nconst getFilter = state => state.contacts.filter;\r\n\r\nconst getAllContacts = state => state.contacts.items;\r\n\r\n// const getVisibleContacts = state => {\r\n//   const contacts = getAllContacts(state);\r\n//   const filter = getFilter(state);\r\n\r\n//   return allContacts.filter(contacts =>\r\n//     contacts.name.toLowerCase().includes(filter.toLowerCase()),\r\n//   );\r\n// };\r\n\r\nconst getVisibleContacts = createSelector(\r\n  [getAllContacts, getFilter],\r\n  (contacts, filter) => {\r\n    return contacts.filter(contacts =>\r\n      contacts.name.toLowerCase().includes(filter.toLowerCase()),\r\n    );\r\n  },\r\n);\r\n\r\nexport default {\r\n  getLoading,\r\n  getFilter,\r\n  getVisibleContacts,\r\n};\r\n","import axios from 'axios';\r\nimport {\r\n  fetchContactRequest,\r\n  fetchContactError,\r\n  fetchContactSuccess,\r\n  addContactRequest,\r\n  addContactSuccess,\r\n  addContactError,\r\n  removeContactRequest,\r\n  removeContactError,\r\n  removeContactSuccess,\r\n} from './contacts-action';\r\n\r\naxios.defaults.baseURL = 'http://localhost:4040';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n  dispatch(fetchContactRequest());\r\n\r\n  axios\r\n    .get('/contacts')\r\n    .then(({ data }) => dispatch(fetchContactSuccess(data)))\r\n    .catch(error => dispatch(fetchContactError(error)));\r\n};\r\n\r\nconst addContact = text => dispatch => {\r\n  console.log(addContact);\r\n  const contact = {\r\n    name: text.name,\r\n    number: text.number,\r\n  };\r\n\r\n  dispatch(addContactRequest());\r\n\r\n  axios\r\n    .post('/contacts', contact)\r\n    .then(({ data }) => dispatch(addContactSuccess(data)))\r\n    .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nconst removeContact = contactId => dispatch => {\r\n  dispatch(removeContactRequest());\r\n\r\n  axios\r\n    .delete(`/contacts/${contactId}`)\r\n    .then(() => dispatch(removeContactSuccess(contactId)))\r\n    .catch(error => dispatch(removeContactError(error)));\r\n};\r\n\r\nexport default { fetchContacts, addContact, removeContact };\r\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport styles from './ContactList.module.css';\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\nimport contactsOperations from '../../redux/contacts/contacts-operations';\nimport { connect } from 'react-redux';\n\nconst ContactList = ({ contacts, onRemoveContact }) => (\n  <ul className={styles.TaskList}>\n    {contacts.map(contact => (\n      <li className={styles.TaskList_item} key={contact.id}>\n        {contact.name + ':' + contact.number}\n        {\n          <button\n            className={styles.TaskList_button}\n            type=\"button\"\n            name=\"delete\"\n            onClick={() => onRemoveContact(contact.id)}\n            // onClick={() => onRemoveContact(id)}\n          >\n            delete\n          </button>\n        }\n      </li>\n    ))}\n  </ul>\n);\n\nContactList.propTypes = {\n  onRemoveContact: PropTypes.func.isRequired,\n  contacts: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    }),\n  ),\n};\n\n// const getVisibleContacts = (allContacts, filter) => {\n//   // const { contacts, filter } = this.state;\n\n//   return allContacts.filter(contacts =>\n//     contacts.name.toLowerCase().includes(filter.toLowerCase()),\n//   );\n// };\n\n// const mapStateToProps = ({ contacts: { items, filter } }) => ({\n//   contacts: getVisibleContacts(items, filter),\n// });\n\nconst mapStateToProps = state => ({\n  contacts: contactsSelectors.getVisibleContacts(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onRemoveContact: id => dispatch(contactsOperations.removeContact(id)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\n\n// export default ContactList;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport * as contactsActions from '../../redux/contacts/contacts-action';\nimport contactsSelectors from '../../redux/contacts/contacts-selectors';\n\nconst Filter = ({ value, onChangeFilter }) => {\n  return (\n    <div>\n      Find contacts by name\n      <input type=\"text\" value={value} onChange={onChangeFilter} />\n    </div>\n  );\n};\n\nFilter.propTypes = {\n  value: PropTypes.string,\n  onchangeFilter: PropTypes.func,\n};\nFilter.defaultProps = {\n  value: '',\n  onchangeFilter: () => {},\n};\n\nconst mapStateToProps = state => ({\n  value: contactsSelectors.getFilter(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  onChangeFilter: e => dispatch(contactsActions.changeFilter(e.target.value)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Filter);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { connect } from 'react-redux';\nimport contactsOperations from '../../redux/contacts/contacts-operations';\nimport styles from './ContactForm.module.css';\n\nclass ContactForm extends Component {\n  state = {\n    name: '',\n    number: '',\n  };\n\n  handleChange = e => {\n    const { name, value } = e.target;\n    this.setState({\n      [name]: value,\n    });\n  };\n\n  handleSubmit = e => {\n    e.preventDefault();\n\n    const searchSameName = this.props.items.find(\n      contact => contact.name === this.state.name,\n    );\n    console.log(searchSameName);\n\n    if (searchSameName) {\n      alert(`${this.state.name} is already in contacts`);\n      return;\n    } else if (this.state.name.length === 0) {\n      alert('Fields must be filled!');\n      return;\n    }\n    this.props.onAddContact({ ...this.state });\n    this.setState({ name: '', number: '' });\n  };\n  render() {\n    return (\n      <form className={styles.TaskEditor} onSubmit={this.handleSubmit}>\n        <label className={styles.TaskEditor_label}>\n          Name\n          <input\n            className={styles.TaskEditor_input}\n            type=\"text\"\n            name=\"name\"\n            value={this.state.name}\n            onChange={this.handleChange}\n          />\n        </label>\n        <label className={styles.TaskEditor_label}>\n          Number\n          <input\n            className={styles.TaskEditor_input}\n            type=\"text\"\n            name=\"number\"\n            value={this.state.number}\n            onChange={this.handleChange}\n          />\n        </label>\n        <button className={styles.TaskEditor_button} type=\"submit\">\n          Add contact\n        </button>\n      </form>\n    );\n  }\n}\n\nContactForm.propTypes = {\n  onAddContact: PropTypes.func,\n  name: PropTypes.string,\n  number: PropTypes.string,\n};\n\nconst mapStateToProps = state => {\n  //console.log(state);\n  return {\n    items: state.contacts.items,\n  };\n};\n\nconst mapDispatchToProps = dispatch => ({\n  onAddContact: text => dispatch(contactsOperations.addContact(text)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport ContactList from './component/ContactList';\nimport Filter from './component/Filter';\nimport ContactForm from './component/ContactForm';\nimport contactsOperations from './redux/contacts/contacts-operations';\nimport contactsSelectors from './redux/contacts/contacts-selectors';\n\nclass App extends Component {\n  componentDidMount() {\n    console.log(this.props);\n    this.props.fetchContacts();\n  }\n  render() {\n    return (\n      <div>\n        <h1>Phonebook</h1>\n        <ContactForm />\n        <h2>Contacts</h2>\n\n        {this.props.isLoadingContacts && <h3>loading...</h3>}\n\n        <Filter />\n        <ContactList />\n      </div>\n    );\n  }\n}\nconst mapStateToProps = state => ({\n  isLoadingContacts: contactsSelectors.getLoading(state),\n});\n\nconst mapDispatchToProps = dispatch => ({\n  fetchContacts: () => {\n    console.log('111');\n    dispatch(contactsOperations.fetchContacts());\n  },\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\n\nimport store from './redux/store';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"TaskEditor\":\"ContactForm_TaskEditor__yBtsD\",\"TaskEditor_label\":\"ContactForm_TaskEditor_label__1HgMc\",\"TaskEditor_input\":\"ContactForm_TaskEditor_input__13Mw2\",\"TaskEditorinput\":\"ContactForm_TaskEditorinput___cBMk\",\"TaskEditor_button\":\"ContactForm_TaskEditor_button__3aSvn\"};"],"sourceRoot":""}